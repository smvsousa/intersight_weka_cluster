# Intersight provider Information
terraform {
  cloud {    
    organization = "cisco-lisbon-coe"    
    workspaces {      
      name = "weka"    
    }  
  }
  
  required_providers { 
    intersight = {
      source = "CiscoDevNet/intersight"
      version = "~> 1.0.25" }
  } 
}

provider "intersight" {
  apikey = var.api_key_id
  secretkey = var.api_private_key
  endpoint = var.api_endpoint
}

locals {
  new_ethernet_networks = zipmap(module.ethernet_networks[*].eth_net_name,module.ethernet_networks[*].eth_net_moid)
  new_eth_adapter_configs = zipmap(module.ethernet_adapters[*].eth_adapter_name,module.ethernet_adapters[*].eth_adapter_moid)
  new_qos_configs = zipmap(module.ethernet_qos[*].eth_qos_name,module.ethernet_qos[*].eth_qos_moid)
}

module "moids" {
  source = "./obtain_moids"
  server_names = var.server_names 
  organization_name = var.organization_name
  catalog_name = var.catalog_name
  osimagelink_name = ""
  scuimagelink_name = ""
}

/*  NOT APPLICABLE FOR STANDALONE SERVERS
module "uuidpool" {
  source = "./create_pools/uuid"

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix
}*/

module "lan_conn" {
  source = "./create_policy/lan_connectivity"

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

iqn_allocation_type = var.iqn_allocation_type
placement_mode      = var.placement_mode
target_platform     = var.target_platform
}

module "ethernet_qos" {
  source = "./create_policy/eth_qos"
  count = length(var.ethernet_qos_policies)

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

vnic_qos = var.ethernet_qos_policies[count.index].vnic_qos
}

module "ethernet_networks" {
  source = "./create_policy/eth_net"
  count = length(var.ethernet_networks)

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

default_vlan = var.ethernet_networks[count.index].default_vlan
eth_mode     = var.ethernet_networks[count.index].eth_mode
allowed_vlans= var.ethernet_networks[count.index].allowed_vlans
}

module "ethernet_adapters" {
  source = "./create_policy/eth_adapter"
  count = length(var.ethernet_adapter_policies)

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

net_function = var.ethernet_adapter_policies[count.index].net_function
compqueue_nr = var.ethernet_adapter_policies[count.index].compqueue_nr
compqueue_ringsize = var.ethernet_adapter_policies[count.index].compqueue_ringsize
rxqueue_nr = var.ethernet_adapter_policies[count.index].rxqueue_nr
rxqueue_ringsize = var.ethernet_adapter_policies[count.index].rxqueue_ringsize
txqueue_nr = var.ethernet_adapter_policies[count.index].txqueue_nr
txqueue_ringsize = var.ethernet_adapter_policies[count.index].txqueue_ringsize
}

module "ethernet_interfaces" {
  source = "./create_policy/eth_ifaces"
  count = length(var.network_config)

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

vnic_name  = "${var.network_config[count.index].if_nameprefix}${var.network_config[count.index].vnic_slot}"
vnic_order = var.network_config[count.index].vnic_slot
vic_slotid = var.network_config[count.index].vic_slot_id
vnic_pci_link = var.network_config[count.index].pci_link
vnic_phy_port = var.network_config[count.index].phy_port
lan_connectivity_moid = module.lan_conn.lan_connectivity_moid
eth_net_moid = lookup(local.new_ethernet_networks, 
                     "${var.policy_name_prefix}eth_net.${var.network_config[count.index].default_vlan}", 
                    "NotFound")
eth_adapter_moid = lookup(local.new_eth_adapter_configs, 
                     "${var.policy_name_prefix}eth_adapter.${var.network_config[count.index].adapter_policy}", 
                    "NotFound")
eth_qos_moid = lookup(local.new_qos_configs, 
                     "${var.policy_name_prefix}qos.${var.network_config[count.index].qos_policy}", 
                    "NotFound")
}

module "storage_policy" {
  source = "./create_policy/storage_policy"

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

storage_pol_name = var.storage_pol_name
storage_pol_use_jbod = var.storage_pol_use_jbod
storage_pol_unused_state = var.storage_pol_unused_state
storage_pol_m2vd = var.storage_pol_m2vd

}

module "storage_diskgroups" {
  source = "./create_policy/storage_dg"
 
organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix
storage_dg_name = var.storage_dg_name
storage_dg_raid = var.storage_dg_raid
storage_dg_type = var.storage_dg_type # "0" for manual drive selection and "1" for automatic drive selection
storage_dg_drive_slots = var.storage_dg_drive_slots

storage_vd_name = var.storage_vd_name
storage_vd_size =  var.storage_vd_size #minimum size
storage_vd_expand = var.storage_vd_expand # true or false
storage_vd_bootable = var.storage_vd_bootable # true or false

storage_policy_moid = module.storage_policy.storage_policy_moid
}


module "osboot_policy" {
  source = "./create_policy/os_boot"

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

osboot_pol_name = var.osboot_pol_name
osboot_pol_description = var.osboot_pol_description
osboot_pol_bootmode = var.osboot_pol_bootmode
osboot_pol_enforceuefi = var.osboot_pol_enforceuefi
osboot_enable_cimcdvd = var.osboot_enable_cimcdvd
osboot_enable_localhdd = var.osboot_enable_cimcdvd

}

module "ntp_policy" {
  source = "./create_policy/ntp"

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

ntp_name = var.ntp_name
ntp_description = var.ntp_description
ntp_enabled = var.ntp_enabled
ntp_timezone = var.ntp_timezone
ntp_servers = var.ntp_servers
}

module "vkvm_policy" {
  source = "./create_policy/vkvm"

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

vkvm_name = var.vkvm_name
vkvm_description = var.vkvm_description
}

module "bios_policy" {
  source = "./create_policy/bios"

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

bios_name = var.bios_name
bios_description = var.bios_description
}


module "server_template" {
  source = "./create_profile/template"

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

server_template_name = var.server_template_name
server_template_description = var.server_template_description 
server_template_platform = var.server_template_platform

boot_policy_moid = module.osboot_policy.os_boot_policy_moid
lanconn_policy_moid = module.lan_conn.lan_connectivity_moid
ntp_policy_moid = module.ntp_policy.ntp_policy_moid
vkvm_policy_moid = module.vkvm_policy.vkvm_policy_moid
storage_policy_moid = module.storage_policy.storage_policy_moid
bios_policy_moid = module.bios_policy.bios_policy_moid
#uuidpool_moid = module.uuidpool.uuid_pool_moid

# Terraform destroy was failing randomly when destroying eth_interfaces and storage_policies
# Need to communicate this back to developer
depends_on = [module.lan_conn,
  module.ethernet_qos,
  module.ethernet_networks,
  module.ethernet_adapters,
  module.ethernet_interfaces,
  module.storage_policy,
  module.storage_diskgroups]
}



module "server_profile" {
  source = "./create_profile/server"
  count = length(module.moids.server_moids)

organization_moid = module.moids.organization_moid
policy_name_prefix = var.policy_name_prefix

server_profile_name = "node.${count.index}" 

src_template_moid = module.server_template.server_template_moid

boot_policy_moid = module.osboot_policy.os_boot_policy_moid
lanconn_policy_moid = module.lan_conn.lan_connectivity_moid
ntp_policy_moid = module.ntp_policy.ntp_policy_moid
vkvm_policy_moid = module.vkvm_policy.vkvm_policy_moid
storage_policy_moid = module.storage_policy.storage_policy_moid
bios_policy_moid = module.bios_policy.bios_policy_moid
#uuidpool_moid = module.uuidpool.uuid_pool_moid   ##NOT APPLICABLE FOR STANDALONE SERVERS

tags_key1 = var.tags_key1
tags_value1 = var.tags_value1
tags_key2 = var.tags_key2
tags_value2 = "${count.index}"

physical_server = module.moids.server_moids[count.index]
}



## Outputs for control

/*  NOT APPLICABLE FOR STANDALONE SERVERS
output "new_uuid_pool" {
  value = "UUID pool name;id: ${module.uuidpool.uuid_pool_name};${module.uuidpool.uuid_pool_moid}"
} 
*/

output "new_networks" {
  value = local.new_ethernet_networks
}

output "new_adapter_configs" {
  value = local.new_eth_adapter_configs
}

output "new_qos_configs" {
  value = local.new_qos_configs
}

output "new_ifaces" {
  value = module.ethernet_interfaces[*].new_ifaces
}

output "new_lanconnectivity" {
  value = "${module.lan_conn.lan_connectivity_name}:${module.lan_conn.lan_connectivity_moid}"
}

output "new_storage_dg_policy" {
  value = "${module.storage_diskgroups.storage_dg_policy_name}:${module.storage_diskgroups.storage_dg_policy_moid}"
}

output "new_storage_policy" {
  value = "${module.storage_policy.storage_policy_name}:${module.storage_policy.storage_policy_moid}"
}

output "new_osboot_policy" {
  value = "${module.osboot_policy.os_boot_policy_name}:${module.osboot_policy.os_boot_policy_moid}"
}

output "new_ntp_policy" {
  value = "${module.ntp_policy.ntp_policy_name}:${module.ntp_policy.ntp_policy_moid}"
}

output "new_vkvm_policy" {
  value = "${module.vkvm_policy.vkvm_policy_name}:${module.vkvm_policy.vkvm_policy_moid}"
}

output "new_bios_policy" {
  value = "${module.bios_policy.bios_policy_name}:${module.bios_policy.bios_policy_moid}"
}

output "new_assigned_servers" {
  value = module.server_profile[*].server_profile_moid
}